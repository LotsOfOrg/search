"""Core types and interfaces for building a personal search engine"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Document', 'SearchResult', 'Query', 'Index']

# %% ../nbs/00_core.ipynb 2
from fastcore.basics import *
from fastcore.foundation import *
from fastcore.test import *
from datetime import datetime
from typing import Optional

# %% ../nbs/00_core.ipynb 4
class Document:
    """A searchable document with content and metadata
    
    A Document represents any piece of content that can be indexed and searched. This could be:
    - A web page
    - A local file
    - An email
    - A note or document
    """
    def __init__(self, 
                 id:str,                      # Unique identifier for the document
                 content:str,                 # The main content of the document
                 metadata:dict[str,any]=None, # Flexible metadata storage
                 created_at:datetime=None,    # When the document was created
                 source:str=None              # Where this document came from
                ):
        store_attr()
        if metadata is None: self.metadata = {}
        if created_at is None: self.created_at = datetime.now()
    
    def __repr__(self): return f"Document(id={self.id}, source={self.source})"
    
    @property
    def summary(self) -> str:
        "Returns a brief summary of the document content"
        return self.content[:100] + "..." if len(self.content) > 100 else self.content

# %% ../nbs/00_core.ipynb 7
class SearchResult:
    """A document match with relevance information
    
    SearchResult objects are returned by Index implementations to represent matches,
    including:
    - The matched document
    - A relevance score (higher is better)
    - Optional highlighted snippets showing match context
    """
    def __init__(self,
                 document:Document,          # The document that matched
                 score:float,                # Relevance score
                 highlights:list[str]=None   # Highlighted snippets from the document
                ):
        store_attr()
        if highlights is None: self.highlights = []
    
    def __repr__(self): return f"SearchResult(doc={self.document.id}, score={self.score:.3f})"
    
    @property
    def best_highlight(self) -> Optional[str]:
        "Returns the most relevant highlight if available"
        return self.highlights[0] if self.highlights else None

# %% ../nbs/00_core.ipynb 9
class Query:
    """A search request with filters and preferences
    
    Query objects encapsulate all parameters for a search request:
    - Search text (what to look for)
    - Filters (metadata constraints)
    - Boost factors (field importance weights)
    """
    def __init__(self,
                 text:str,                   # The search text
                 filters:dict[str,any]=None, # Metadata filters to apply
                 boost:dict[str,float]=None  # Boost factors for specific fields
                ):
        store_attr()
        if filters is None: self.filters = {}
        if boost is None: self.boost = {}
    
    def __repr__(self): return f"Query(text='{self.text}')"

# %% ../nbs/00_core.ipynb 11
class Index:
    """Base class for all index implementations
    
    This abstract base class defines the interface that all index implementations
    must provide. Implementations might include:
    - Inverted index for text search
    - Vector index for semantic search
    - Graph index for relationship-based search
    """
    def __init__(self): pass
    
    def add(self, doc:Document):
        "Add a document to the index"
        raise NotImplementedError
    
    def remove(self, doc_id:str):
        "Remove a document from the index"
        raise NotImplementedError
    
    def search(self, query:Query) -> list[SearchResult]:
        "Search the index with the given query"
        raise NotImplementedError
    
    def clear(self):
        "Clear all documents from the index"
        raise NotImplementedError

# Concrete Index classes implemented in 01_indexes.ipynb
